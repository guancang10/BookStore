// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"github.com/guancang10/BookStore/API/appdb"
	"github.com/guancang10/BookStore/API/controllers"
	"github.com/guancang10/BookStore/API/middleware"
	"github.com/guancang10/BookStore/API/repository"
	"github.com/guancang10/BookStore/API/routes"
	"github.com/guancang10/BookStore/API/services"
	"net/http"
)

// Injectors from Injector.go:

func InitServer() *http.Server {
	categoryRepository := repository.NewCategoryRepository()
	db := appdb.GetConnection()
	validate := validator.New()
	categoryServices := services.NewCategoryServiceImpl(categoryRepository, db, validate)
	controllersCategoryController := controllers.NewCategoryControllerImpl(categoryServices)
	bookRepository := repository.NewBookRepositoryImpl()
	bookServices := services.NewBookServiceImpl(db, bookRepository, validate)
	controllersBookController := controllers.NewBookControllerImpl(bookServices)
	userRepository := repository.NewUserRepositoryImpl()
	userServices := services.NewUserServiceImpl(db, validate, userRepository)
	controllersUserController := controllers.NewUserControllerImpl(userServices)
	router := routes.SetRouter(controllersCategoryController, controllersBookController, controllersUserController)
	middlewareMiddleware := middleware.NewMiddleware(router)
	server := routes.SetServer(middlewareMiddleware)
	return server
}

// Injector.go:

var categoryController = wire.NewSet(repository.NewCategoryRepository, services.NewCategoryServiceImpl, controllers.NewCategoryControllerImpl)

var bookController = wire.NewSet(repository.NewBookRepositoryImpl, services.NewBookServiceImpl, controllers.NewBookControllerImpl)

var userController = wire.NewSet(repository.NewUserRepositoryImpl, services.NewUserServiceImpl, controllers.NewUserControllerImpl)
